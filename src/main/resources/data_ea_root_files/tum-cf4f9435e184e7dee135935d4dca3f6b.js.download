/**
 * This script is sourced in all pages
 */

(function($) {
	"use strict";

	/** Utilities, misc. */
	TUM.lang = $('html').attr('lang');
	TUM.ll = function(dict) {
		if (dict.hasOwnProperty(TUM.lang)) return dict[TUM.lang];
		for (var first in dict) return first;
	};
	$('.video-js-box').css({'width':'auto', 'height':'auto'});
	if (typeof $.fn.colorbox !== 'function') $.fn.colorbox = function(x){return this;};

	/** Arrange elements depending on display width */
	TUM.respond = {
		// Functions to execute
		funcs: [],

		// Elements for explicit scaling
		resizeEls: [],

		// Helper
		maxWidth: function (px) {
			return window.matchMedia
				? window.matchMedia('(max-width: '+px+'px)').matches
				: (window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth) < px;
		},

		// Initialize: Attach to resize event, debounced
		init: function() {
			TUM.respond.resizeTimer = null;
			$(window).resize(function() {
				if (!TUM.respond.resizeTimer)
					TUM.respond.resizeTimer = setTimeout(function() { TUM.respond.resizeTimer = null; TUM.respond.now(); }, 133); // Limit frequency (ms)
			});
		},

		// Add function
		add: function (f, run) {
			if (typeof run === 'undefined' || run) f();
			if (this.funcs.length == 0) this.init();
			this.funcs.push(f);
		},

		// Execute functions
		now: function() {
			for (var i = 0;  i < this.funcs.length; i++)
				this.funcs[i]();
		}
	};

	/** Activate accordion function via H2 class */
	var els = $('h2.cordi').parent();
	if (els.length) {
		els.each(function() {
			$(this).addClass('accordion');
			var all = $(this).children();
			var expandable = all.filter(':gt(0)');
			if (expandable.length) {
				expandable.wrapAll('<div class="expandable">');
				all.first().addClass('expander');
			}
		});
		TUM.loadOnce.sexpand = '/fileadmin/tum/3rd/simpleexpand/simple-expand.min.js';
	}

	// DOM ready
	$(function() {

		/** Streaming videos */
		if (TUM.video.length)
			TUM.loadOnce.streams = '/fileadmin/tum/streams.js';

		/** Image maps */
		TUM.imagemaps = $('img[usemap]');
		if (TUM.imagemaps.length > 0) {
			TUM.loadOnce.imagemaps = {
				url: '/fileadmin/tum/3rd/jquery/jquery.rwdImageMaps.min.js',
				done: function() { TUM.imagemaps.rwdImageMaps(); }
			};
		}

		/** Load scripts requested by CEs or above */
		$.each(TUM.loadOnce, function(key, value) {
			if (typeof value === 'string') {
				value = { url: value };
				switch (key) {
					case 'sexpand':
						value.done = function() {
							$('.expander').simpleexpand({'defaultTarget': '.expandable'});
							if (window.location.hash && window.location.hash.search(/^#c\d+$/) != -1) {
								$(window.location.hash + ' .expander').first().click();
								$(window).scrollTop($(window.location.hash).position().top);
							}
						};
						break;
					default: value.done = function(){};
				}

			};
			jQuery.ajax({
				url: value.url,
				dataType: 'script',
				cache: true
			}).done(value.done);
		});

		/** Switch menu state */
		TUM.respond.add(function() {
			var mState = window.matchMedia ? window.matchMedia('(min-width: 601px)').matches : $('#menutoggle').css('display') != 'none';
			if (TUM.mStateMem != mState) {
				if (mState) {
					// Wide: Hide user-expanded submenus, show navigation and current submenu,
					$('#sitenav').find('.inserted').hide();
					$('#sitenav').toggle(true);
					$('#currentsub').show();
					$('.audience').first().toggle(true);
				} else {
					// Narrow: Collapse navgation, restore user-expanded submenus
					$('#sitenav').toggle(false);
					$('.audience').first().toggle(false);
					$('#sitenav').find('.subx').each(function(){ if ($(this).data('state') == 2) $(this).next('ul').show(); });
				}
				TUM.mStateMem = mState;
			}
		});

		/** Activate menu toggling */
		$('#menutoggle').click(function(e) {
			e.preventDefault();
			$('.audience').first().slideToggle('slow');
			$('#sitenav').slideToggle('slow');
		});

		/** Activate search box */
		if (TUM.search.box) {
			var parts = TUM.search.path.split('?');
			var alt = TUM.ll({de:'Suche', en:'Search'});
			var form = '<form id="cse-box" action="' + parts[0] + '">\
				<input type="text" id="cse-q" name="q" value="" />\
				<button><img id="cse_sbblue" src="/fileadmin/tum/icons/search-white.png" alt="' + alt + '" /><img id="cse_sbgray" src="/fileadmin/tum/icons/search.png" alt="' + alt + '" /></button>\
				<input type="hidden" name="sites" value="this" />';
			if (parts.length > 1) {
				$.each(parts[1].split('&amp;'), function(i, value) {
					var kv = value.split('=');
					if (kv[0]=='id' && kv[1]) form += '<input type="hidden" name="id" value="' + decodeURI(kv[1]) + '"/>';
					if (kv[0]=='L'  && kv[1] && kv[1]>0) form += '<input type="hidden" name="L" value="'  + decodeURI(kv[1]) + '"/>';
				});
			}
			form += '</form>';
			$('#cse-stub').replaceWith(form);
			$('#cse-q')
				.data('watermark', $('#cse-q').css('backgroundImage'))
				.blur(function(){ if ($(this).val().length == 0) $(this).css('backgroundImage', $(this).data('watermark')); })
				.focus(function(){ $(this).css('backgroundImage', 'none'); })
			;
		}

		/** Activate submenu expanders */
		$('#sitenav').find('li.sub > a').each(function expanders() {
			$(this)
				.after($('<ul class="inserted"></ul>').hide())
				.after($('<img class="subx" src="/fileadmin/tum/icons/mx_can.png" alt="+"/>').data('state', 0).click(function(){
					switch ($(this).data('state')) {
						case 0: // Not loaded (+): set "...", load, then expand, set "-"
							$(this).data('state', 1).attr({src:'/fileadmin/tum/icons/mx_wait.png', alt:'â‹¯'});
							var url = ($(this).prev().data('pid'))
								? TUM.hp + (TUM.hp.indexOf('?') === -1 ? '?' : '&') + 'pid=' + $(this).prev().data('pid')
								: $(this).prev().attr('href');
							url += (url.indexOf('?') === -1 ? '?' : '&') + 'type=5';
							$(this).next().load(url, function(){
								$(this).find('li.sub > a').each(expanders);
								$(this).slideDown();
								$(this).prev().data('state', 2).attr({src:'/fileadmin/tum/icons/mx_is.png', alt:'-'});
							});
							break;
						// case 1: Still loading, pass
						case 2: // Loaded and expanded (-): set "+", collapse,
							$(this).next().slideUp();
							$(this).data('state', 3).attr({src:'/fileadmin/tum/icons/mx_can.png', alt:'+'});
							break;
						case 3: // Loaded and collapsed (+): set "-", expand
							$(this).next().slideDown();
							$(this).data('state', 2).attr({src:'/fileadmin/tum/icons/mx_is.png', alt:'-'});
							break;
					}
				}))
			;
		});
		$('#sitenav').find('li.current.hassub > strong').first().each(function () {
			$(this)
				.after($('<img class="subx" src="/fileadmin/tum/icons/mx_is.png" alt="-"/></span>').data('state', 2).click(function (){
					switch ($(this).data('state')) {
						case 2: $(this).next().slideUp(); $(this).data('state', 3).attr({src:'/fileadmin/tum/icons/mx_can.png', alt:'+'}); break;
						case 3: $(this).next().slideDown(); $(this).data('state', 2).attr({src:'/fileadmin/tum/icons/mx_is.png', alt:'-'}); break;
					}
				}))
				.next().next().attr('id', 'currentsub')
			;
		});

		/** Responsive iframes */
		$('iframe[data-resizeme][width][height]').each(function() {
			$(this).css('maxWidth', '100%');
			TUM.respond.resizeEls.push({el: $(this), w: parseInt($(this).attr('width')), h: parseInt($(this).attr('height'))});
		});

		/** Activate popup links **/
		$('a.popup').on('click', function() {
			var newwindow = window.open(
				$(this).attr('href'),
				$(this).attr('target'),
				$(this).data('popts') + ',top=150,left=50,resizable=yes,scrollbars=yes,status=yes'
			);
			newwindow.focus();
			return false;
		});

		/** Prepare tables for "folding" */
		$('table.fold').each(function() {
			var $table = $(this);

			// Collect data
			var headers = [], footers = [], ranks = [];
			$table.find('thead th').each(function(i) { headers.push($(this).text()); });
			var colsTotal = headers.length || $table.find('tr:first').children().length;
			if ($table.hasClass('byfooter'))
				$table.find('tfoot tr:first').children().each(function(i) { ranks.push({col: i, rnk: parseInt($(this).text(), 10) || 0}); });
			else
				for (var i = 0; i < colsTotal; i++) ranks.push({col: i, rnk: $table.hasClass('reverse') ? colsTotal - i : i});
			$table.removeClass('flex')
				.data({'headers': headers, 'colsTotal': colsTotal, 'colsVisible': colsTotal, 'colsHidden': 0, 'ranks': ranks.sort(function(a, b) { return a.rnk - b.rnk; })});

			// Prepare rows
			$table.find('tbody tr, tfoot tr' + ($table.hasClass('byfooter') ? ':not(:first)' : '')).each(function() {
				var $this = $(this);

				// Container for "more"
				$this.after($('<tr class="more"><td></td></tr>').hide());

				// Updates content of following "more" row
				this.update = function() {
					var cells = $this.find('th,td');
					$this.next().empty().prepend(
						$('<td />', {'colspan': $(this).parents('table').data('colsVisible')+1})
						.append(function() {
							if ($table.data('headers').length) {
								var list = $('<dl/>');
								for (var i = $table.data('colsVisible'); i < $table.data('colsTotal'); i++)
									list.append('<dt>' + $table.data('headers')[i] + '</dt><dd>' + ($(cells[i]).html()) + '</dd>');
							} else {
								var list = $('<ul/>');
								for (var i = $table.data('colsVisible'); i < $table.data('colsTotal'); i++)
									list.append('<li>' + ($(cells[i]).html()) + '</li>');
							}
							return list;
						})
					);
				};

				// Updates and shows following "more" row
				this.expand = function(){
					$this[0].update();
					$this.addClass('expanded').next().show();
				};

				// Hides following "more" row
				this.collapse = function(){
					$this.removeClass('expanded').next().hide('fast');
				};

				// Toggle button
				$this.append(
					$('<td class="btn"/>').prepend(
						$('<button type="button"><img src="/fileadmin/tum/icons/exp-plus.png" alt="+"/></button>')
						.on('click', function(){
							var this_row = $(this).parents('tr');
							if (this_row.hasClass('expanded'))
								this_row[0].collapse();
							else
								this_row[0].expand();
						})
					)
				);
			});

			// Toglle all button
			$table.find('thead tr')
				.append($('<th class="btn"></th>')
					.append($('<button type="button" title="'+TUM.ll({de:'Alle erweitern',en:'Expand all'})+'"><img src="/fileadmin/tum/icons/exp-plus.png" alt="+"/></button>')
						.on('click', function() {
							var $rows = $(this).parents('table').find('tr').not('thead tr, .more');
							var $rowsCo = $rows.not('.expanded');
							if ($rowsCo.length == $rows.length)
								$rowsCo.find('button').click();
							else
								$rows.filter('.expanded').find('button').click();
						})
					)
				);
		});

		/** Prepare tables for "flexing" */
		$('table.flex').each(function() {
			var headers = [];
			$(this).find('thead th').each(function() { headers.push($(this).text()); });
			$(this).find('tbody tr').each(function() {
				$(this).find('th,td').each(function(index) {
					$(this).attr('data-label', (headers[index] ? headers[index] : '('+index+')'));
					if ($(this).text() == ' ') $(this).html('&nbsp;');
				});
			});
		});
	});


	// Everything loaded
	$(window).on('load', function () {
		var $els;

		/** Detect image loading */
		Modernizr.addTest('images', function() {
			var imgs = $('img');
			if (imgs.length) {
				var img = imgs.eq(0);
				return (img.prop('complete') && typeof img.prop('naturalWidth') != 'undefined' && img.prop('naturalWidth') != 0);
			}
			return true;
		});

		/** Fix height of wrapping image cells */
		TUM.respond.Eh0 = $('.csc-textpic-imagewrap').filter(function(){ return $(this).data('csc-cols') > 4; });
		if (TUM.respond.Eh0.length) {
			// Minified tum/3rd/jquery/jquery.equalheight.js
			!function(h){h.fn.equalheight=function(t){var i,e,n,u=0,g=0,o=[];return this.find(t).each(function(){if(e=h(this),e.height("auto"),n=e.position().top,g==n)o.push(e),u=Math.max(u,e.height());else{for(i=0;i<o.length;i++)o[i].height(u);o.length=0,g=n,u=e.height(),o.push(e)}for(i=0;i<o.length;i++)o[i].height(u)}),this}}($);
			TUM.respond.add(function() {
				if (TUM.respond.maxWidth(800)) {
					TUM.respond.Eh0.equalheight('.csc-textpic-imagecolumn');
				} else {
					$('.csc-textpic-imagecolumn').height('auto');
				}
			});
		}

		/** Table "folding" */
		if ($('table.fold').length) {
			TUM.respond.add(function(){
				$('table.fold').each(function() {
					var $this = $(this);
					var formerCh = $this.data('colsHidden'), lastRank = -1, ch = 0, cv = $this.data('colsTotal'), ranks=$this.data('ranks');

					// Show all, then remove columns until not overflowing
					var wrapper = $this.parent().get(0);
					//$this.find('tr:not(.more)').children('td,th').not('.btn').show();
					$this.find('tr:not(.more)').children('td,th').show();
					while (cv > 0 && (wrapper.scrollWidth > wrapper.clientWidth || lastRank == ranks[cv-1].rnk)) {
						// Hide last visible columns
						$this.find('tr:not(.more)').each(function(){
							$(this).children('td,th').eq(ranks[cv-1].col).hide();
							lastRank = ranks[cv-1].rnk;
						});
						cv--;
						ch++;
					}
$this.find('tr:not(.more)').children('td,th').filter('.btn').toggle(ch>0);
					if (ch != formerCh) {
						$this
							.data({'colsHidden': ch, 'colsVisible': cv})
							.find('tr.expanded').each( function(){ this.update(); });
						if (ch > 0) {
							$this.addClass('folded');
							$this.find('.btn').each(function(){$(this).show();});
						} else {
							$this.removeClass('folded').find('.more').children().hide();

	//						$this.find('.btn').hide();
//							$this.find('.btn').css('backgroundColor', 'red').css('display', 'none').hide();
							console.log('.btn');
							console.log($this.find('.btn'));
						}
					}
				});
			});
		}

		/** Table "flexing" */
		if ($('table.flex').length) {
			TUM.respond.add(function() {
				$('table.flex').each(function() {
					var wrapper = $(this).parent().get(0);
					if (wrapper.clientWidth <= $(this).data('flexpoint')) {
						$(this).addClass('flexing');
					} else {
						$(this).removeClass('flexing');
						if (wrapper.scrollWidth > wrapper.clientWidth)
							$(this).addClass('flexing').data('flexpoint', wrapper.clientWidth);
					}
				});
			});
		}

		/** Resize elements explicitly */
		TUM.respond.add(function() {
			$.each(TUM.respond.resizeEls, function(i, value) {
				value.el.height(value.el.width() / value.w * value.h);
			});
		});

		/** Pre-load hover images */
		$.each(['', '-download', '-ext', '-lock', '-mail'], function(i, v) { $('<img/>', {src: '/fileadmin/tum/icons/link'+v+'-a.svg'}); });

		/** For file links, layout 3: Attach lightbox to preview images */
		var $flEls = $('.csc-uploads-3');
		if ($flEls.length) {
			$flEls.find('img').colorbox(jQuery.extend(
				{},
				{
					href: function(){return $(this).attr('src');},
					maxHeight: '98%',
					rel: function(){return $(this).attr('rel');},
					title: function(){return($(this).parent().attr('title') ? $(this).parent().attr('title') : '') + ' [<a class="download" href="' + $(this).parent().attr('href') + '">Download</a>]';}
				},
				TUM.ll({
					de:{
						html: function(){return $(this).attr('width') == '0' ? '<div class="nopreview">Keine Vorschau verfÃ¼gbar</div>' : false;},
						current: 'Vorschau {current} von {total}',
						previous: 'voriges',
						next: 'n&auml;chstes',
						close: 'schliessen'
					},
					en:{
						html: function(){return $(this).attr('width') == '0' ? '<div class="nopreview">No preview available</div>' : false;},
						current: 'Preview {current} of {total}',
						previous: 'previous',
						next: 'next',
						close: 'close'
					}
				})
			));
		}

		/** Fit colorbox titles */
		$(document).bind('cbox_complete', function(){
			$('#cboxTitle')
				.wrapInner('<div id="cboxTitleInner"></div>')
				.css({'font-size':'inherit', 'line-height':'1.2'});
			var h = $('#cboxTitle').height();
			while (h > 45) {
				$('#cboxTitle').css('font-size', '-=1');
				h = $('#cboxTitle').height();
			}
			$('#cboxTitle').css('bottom', (23 - h) +'px');
		});

		/** Enhancements for print */
		window.onbeforeprint = function() {
			if ($('body').hasClass('printextras'))
				return true;
			$('body').removeClass('no-printextras').addClass('printextras');

			var base = window.location.protocol + '//' + window.location.host;

			// List link URLs as footnotes
			var urllist = [];
			var i = 0;
			$('#content a, #sidebar a').not($('#cse a')).each(function() {
				var ref = $(this).attr('href');
				if (ref.substr(0, 1) != '#') {
					if (ref.substr(0, 1) == '/')
						ref = base + ref;
					i = $.inArray(ref, urllist);
					if (i == -1) {
						urllist.push(ref);
						$(this).after('<sup class="print-inline urlindex">['+urllist.length+']</sup>');
					} else {
						$(this).after('<sup class="print-inline urlindex">['+(i+1)+']</sup>');
					}
				}
			});
			var list = $('<ol class="print-block urllist"></ol>');
			for (i = 0; i < urllist.length; i++) {
				list.append($('<li>' + urllist[i] + '</li>'));
			}

			// Short URL, QR code, date
			var surl = base + '/?' + TUM.pid;
			if (TUM.lid) surl += '&L='+TUM.lid;
			var now = new Date();
			var info = $('<p id="pfooter" class="print-block small">'
				+ '<img id="qrimage" src="/fileadmin/tum/opt/qr?s='+encodeURIComponent(base+'/?'+TUM.pid)+'" />'
				+ TUM.ll({de:'Kurz-URL: ', en:'Short URL: '}) + surl
				+ '<br/>' + TUM.ll({de:'Datum: ', en:'Date: '}) + now.getFullYear() + '-' + (now.getMonth()+1) + '-' + now.getDate()
				+ '</p>'
			);

			$('#page-body').after(list, info);
		};

		if (window.matchMedia) {
			window.matchMedia('print').addListener(function(mql) { if (mql.matches) window.onbeforeprint(); });
		}

		/** Inline jQuery */
		if (TUM.userfu) { for (var i=0; i<TUM.userfu.length; i++) { TUM.userfu[i](); } }

	});
}(jQuery));
